openapi: 3.0.3
info:
  title: E-Commerce API
  version: 1.0.0
  description: REST API backend for an e-commerce platform (Node.js + Express + MongoDB)

servers:
  - url: http://localhost:3000/api/v1

# Global security: all endpoints require JWT by default
security:
  - bearerAuth: []

paths:
  /users/register:
    post:
      summary: Register a new user
      security: [] # Override global security → this endpoint is public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully

  /users/login:
    post:
      summary: Authenticate a user and return JWT
      security: [] # Override global security → this endpoint is public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: "12345"
      responses:
        '200':
          description: Login successful, returns JWT token

  /users/logout:
    post:
      summary: Log out the current user
      responses:
        '200':
          description: Logged out

  /users:
    get:
      summary: Get all users (admin only)
      responses:
        '200':
          description: List of users

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
    put:
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
    delete:
      summary: Delete user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted


  /admin/{id}:
    put:
      summary: Set user role to Admin
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isAdmin:
                  type: boolean
      responses:
        '200':
          description: User role updated


  /categories:
    get:
      summary: Get all categories
      responses:
        '200':
          description: Categories list
    post:
      summary: Create new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created

  /categories/{id}:
    get:
      summary: Get category by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Category details
    put:
      summary: Update category
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated
    delete:
      summary: Delete category
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Category deleted


  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: List of products
    post:
      summary: Create a new product (admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:   # Required for file uploads
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                image:
                  type: string
                  format: binary   # This tells Swagger it’s a file
                stock:
                  type: number
                category:
                  type: string

      responses:
        '201':
          description: Product created

  /products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Product details
    put:
      summary: Update product by ID (admin only)
      parameters: 
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated
    delete:
      summary: Delete product by ID (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Product deleted

  /products/images/{id}:
      put:
        summary: Update product images
        parameters:
          - in: path
            name: id
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      type: string
                      format: binary
        responses:
          '200':
            description: Product images updated

  /products/get/count:
    get:
      summary: Get count of products
      responses:
        '200':
          description: Products count


  /orders:
    get:
      summary: Get all orders (admin only)
      responses:
        '200':
          description: Orders list
    post:
      summary: Place a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order placed

  /orders/{id}:
    get:
      summary: Get order by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Order details
    patch:
      summary: Update order
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
      responses:
        '200':
          description: Order updated
    delete:
      summary: Delete order
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Order deleted

  /orders/user/{id}:
    get:
      summary: Get orders by user ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Orders for user


  /cart:
    get:
      summary: Get current user's cart
      responses:
        '200':
          description: Cart details

  /cart/add:
    post:
      summary: Add product to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '201':
          description: Item added

  /cart/remove:
    post:
      summary: Remove product from cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Item removed

  /cart/update:
    put:
      summary: Update item in cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Item updated

  /cart/clear:
    delete:
      summary: Clear cart
      responses:
        '200':
          description: Cart cleared


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        password: { type: string }
        phone: { type: string }
        isAdmin: { type: boolean }
        street: { type: string }
        apartment: { type: string }
        city: { type: string }
        country: { type: string }

    Product:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        price: { type: number }
        images:
          type: array
          items: { type: string }
        category: { type: string }
        stock: { type: integer }

      ProductUpdate:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        price: { type: number }
        category: { type: string }
        countInStock: { type: integer }

    Category:
      type: object
      properties:
        name: { type: string }
        description: { type: string }

    Order:
      type: object
      properties:
        userId: 
          type: string
        orderItems:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer
        shippingAddress:
          type: string
        city:
          type: string
        country:
          type: string
        phone:
          type: string
        status:
          type: string

    OrderResponse:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            totalPrice:
              type: number

    CartItem:
      type: object
      properties:
        product: { type: string }
        quantity: { type: integer }
